import React, { useState, useEffect } from 'react';
import { FaSave, FaTimes } from 'react-icons/fa';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DataForm = ({ columns, initialData, onSubmit, onCancel, isEdit }) => {
  const [formData, setFormData] = useState({});
  const [errors, setErrors] = useState({});

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
  const getColumnName = (column) => {
    return column.column_name || column.COLUMN_NAME;
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –ø–µ—Ä–≤–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
  const isPrimaryKey = (column) => {
    const colKey = column.column_key || column.COLUMN_KEY;
    return colKey === 'PRI';
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (initialData) {
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏:', initialData);
      setFormData(initialData);
    } else {
      // –î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
      const newData = {};
      columns.forEach(column => {
        const columnName = getColumnName(column);
        // –î–ª—è –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π —Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (isPrimaryKey(column) && column.extra === 'auto_increment') {
          newData[columnName] = '';
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          newData[columnName] = '';
        }
      });
      console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞ —Å –ø–æ–ª—è–º–∏:', newData);
      setFormData(newData);
    }
  }, [initialData, columns]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: null
      }));
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {};
    let isValid = true;

    columns.forEach(column => {
      const fieldName = getColumnName(column);
      const value = formData[fieldName];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–µ NULL)
      if (column.is_nullable === 'NO' && (value === '' || value === null)) {
        newErrors[fieldName] = '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        isValid = false;
      }
    });

    setErrors(newErrors);
    return isValid;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      onSubmit(formData);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  const getInputType = (dataType) => {
    if (!dataType) return 'text';
    
    const type = dataType.toLowerCase();
    if (type.includes('int') || type.includes('float') || type.includes('decimal')) {
      return 'number';
    } else if (type.includes('date')) {
      return 'date';
    } else if (type.includes('time')) {
      return 'time';
    } else if (type.includes('bool')) {
      return 'checkbox';
    }
    return 'text';
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
  const renderFormFields = () => {
    return columns.map((column, index) => {
      const columnName = getColumnName(column);
      const isPrimary = isPrimaryKey(column);
      const isAutoIncrement = column.extra === 'auto_increment' || column.EXTRA === 'auto_increment';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
      const dataType = column.data_type || column.DATA_TYPE || '';
      const inputType = getInputType(dataType);

      // –î–ª—è –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π —Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–ª–∞–µ–º –ø–æ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const isReadOnly = (isEdit && isPrimary) || (isEdit && isAutoIncrement);

      return (
        <div className="form-group" key={index}>
          <label htmlFor={columnName}>
            {columnName}
            {isPrimary && <span className="primary-key" title="–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á"> üîë</span>}
            {column.is_nullable === 'NO' && <span className="required" title="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ">*</span>}
          </label>
          
          {inputType === 'checkbox' ? (
            <input
              type="checkbox"
              id={columnName}
              name={columnName}
              checked={Boolean(formData[columnName])}
              onChange={(e) => {
                setFormData(prev => ({
                  ...prev,
                  [columnName]: e.target.checked
                }));
              }}
              disabled={isReadOnly}
              className="form-control"
            />
          ) : (
            <input
              type={inputType}
              id={columnName}
              name={columnName}
              value={formData[columnName] !== null && formData[columnName] !== undefined ? formData[columnName] : ''}
              onChange={handleChange}
              readOnly={isReadOnly}
              className={`form-control ${errors[columnName] ? 'is-invalid' : ''}`}
              placeholder={isAutoIncrement ? '–ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç' : ''}
            />
          )}
          
          {errors[columnName] && (
            <div className="error-text">{errors[columnName]}</div>
          )}
          
          {/* –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö */}
          <small className="form-text text-muted">
            {dataType}
            {isAutoIncrement && ' (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)'}
          </small>
        </div>
      );
    });
  };

  return (
    <div className="modal-backdrop">
      <div className="modal">
        <div className="modal-header">
          <h3 className="modal-title">
            {isEdit ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å' : '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'}
          </h3>
          <button className="modal-close" onClick={onCancel}>√ó</button>
        </div>
        
        <form onSubmit={handleSubmit}>
          {renderFormFields()}
          
          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" onClick={onCancel}>
              <FaTimes /> –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className="btn btn-primary">
              <FaSave /> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default DataForm; 